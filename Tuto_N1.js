- [ ] pragma solidity ^0.4.0;
- [ ] // Declaration du SC
- [ ] contract Split {
- [ ] // Declaration des vaiables globales   
- [ ]     address[] employees = [0x4FfbA43757c7adC7495E68643d90C7F1Be0a6Ad4 , 0x572638046714F1D99FC9b32eD2F78E3E1a2774Da , 0xcff9787ED9a25339c2bFf2375c3f5B1079379206];
- [ ]     uint totalReceive = 0;
- [ ]     mapping (address => uint ) WithDrawnAmounts;
- [ ]     
- [ ] // FonctionConstruteur : Exécution à la création du SC. 
- [ ] // Par defaut les SM ne recoivent pas de monnaie (ETH), il faut le spécifier dans le constructeur et la fonction
- [ ] // de base avec le mot clé "payable", et toute fonction qui est destinée à accepter de la monnaie.
- [ ] // On utilise "payable" pour accépter de l'input ETH ou monnaie.
- [ ] 
- [ ]     function Split() payable public {
- [ ]         
- [ ]         UpdateTotalReceive();
- [ ]         
- [ ]     }
- [ ]     
- [ ] // Fall back function / Fonctionnement de base : Code exécuté suite à l'appel du SC 
- [ ] // sans aucun appel de fonction de la liste des fonctions spécifiées dans le SC.
- [ ] // Exemple : A la réception d’ETH (Envoie d’ETH à l’adresse du contrat)
- [ ]     function () payable public {
- [ ]         UpdateTotalReceive();
- [ ]     }
- [ ]     
- [ ] // Fonction de mise à jour du montant.
- [ ] // Traitement interne -> internal.
- [ ]     function UpdateTotalReceive() internal{
- [ ]         totalReceive += msg.value;
- [ ]     }
- [ ] 
- [ ] // Fonction de test si l'employé est authentique (Inclus dans la liste des adresses).
- [ ] // Fonction bools (True/False)
- [ ]     modifier IsEmpoyee () {
- [ ]         // Declaration des vaiables locales (niveau de la fonction)   
- [ ]         bool IsEmpl = false;
- [ ]         for (uint i = 0 ; i< employees.length ; i++){
- [ ]             if(employees[i] == msg.sender){
- [ ]                 IsEmpl = true;
- [ ]             // Break;En utilisant la fonction Break on optimise le traitement (Sortie de boucle en cas de match)
- [ ]             //       Mais on ne l'utilise pas si on veut que l'ensemble des employes partagent 
- [ ]             //       le paiement des fees de l'emsemble du GAS utilisé.
- [ ]             }
- [ ]         }
- [ ]         require (IsEmpl);
- [ ]         _;
- [ ]         }
- [ ] 
- [ ] // Fonction principale qui fera le traitement. 
- [ ] // RQ : Sans une fonction principale, impossible d'avoir de l'OUTPUT.
- [ ] // La fonction s'exécute uniquement si la fonction de test "IsEmpoyee" est vraie "IsEmpoyee->true"
- [ ]    function WithDraw() IsEmpoyee public {
- [ ]        uint AmountAllocated = totalReceive / employees.length;
- [ ]        uint AmountWithDrawn = WithDrawnAmounts[msg.sender]; 
- [ ]        uint Amount = AmountAllocated - AmountWithDrawn;
- [ ]        WithDrawnAmounts[msg.sender] = AmountWithDrawn + Amount;
- [ ]        if(Amount > 0){
- [ ]            msg.sender.transfer(Amount);
- [ ]        }
- [ ]    
- [ ]     }
- [ ] }
- [ ] 
